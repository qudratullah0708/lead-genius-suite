
import { serve } from "https://deno.land/std@0.190.0/http/server.ts";
import { Resend } from "npm:resend@2.0.0";

const resend = new Resend(Deno.env.get("RESEND_API_KEY"));

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Headers":
    "authorization, x-client-info, apikey, content-type",
};

interface EmailReportRequest {
  recipient_email: string;
  subject: string;
  message: string;
  user_email: string;
  query: string;
  leads: Record<string, any>[];
  attachCsv: boolean;
  csvContent: string;
}

const handler = async (req: Request): Promise<Response> => {
  // Handle CORS preflight requests
  if (req.method === "OPTIONS") {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log("Received email report request");
    const { 
      recipient_email, 
      subject, 
      message, 
      user_email, 
      query, 
      leads, 
      attachCsv, 
      csvContent 
    }: EmailReportRequest = await req.json();

    console.log(`Request data: recipient=${recipient_email}, subject=${subject}, from=${user_email}, attachCsv=${attachCsv}`);
    
    // Validate required fields
    if (!recipient_email) {
      throw new Error("Recipient email is required");
    }

    // Create attachments if CSV is requested
    const attachments = [];
    if (attachCsv && csvContent) {
      console.log("Attaching CSV file");
      const filename = `lead_report_${query.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.csv`;
      const attachment = {
        filename,
        content: csvContent,
      };
      attachments.push(attachment);
    }

    // Prepare email HTML content
    const leadsSummary = leads.length > 0 
      ? `<ul>${leads.slice(0, 5).map(lead => `<li>${lead.name || 'Unnamed'} - ${lead.company || 'Unknown company'}</li>`).join('')}${leads.length > 5 ? `<li>...and ${leads.length - 5} more</li>` : ''}</ul>`
      : '<p>No leads found matching your criteria.</p>';

    const htmlContent = `
      <div style="font-family: Arial, sans-serif; padding: 20px; max-width: 600px;">
        <h2>Lead Report</h2>
        <p>${message.replace(/\n/g, '<br>')}</p>
        
        <h3>Summary</h3>
        <p>Query: <strong>${query}</strong></p>
        <p>Total leads found: <strong>${leads.length}</strong></p>
        
        <h3>Sample Leads</h3>
        ${leadsSummary}
        
        ${attachCsv ? '<p>Please find the complete list of leads in the attached CSV file.</p>' : ''}
        
        <hr style="margin: 20px 0; border: 0; border-top: 1px solid #eee;" />
        <p style="color: #777; font-size: 12px;">
          This report was generated by LeadGen Agent Suite on ${new Date().toLocaleString()}<br>
          Sent by user: ${user_email}
        </p>
      </div>
    `;

    console.log("Sending email via Resend API");
    const emailResponse = await resend.emails.send({
      from: "LeadGen Agent <reports@leadgen-suite.com>",
      to: [recipient_email],
      subject: subject,
      html: htmlContent,
      attachments: attachments,
    });

    console.log("Email sent successfully:", emailResponse);

    return new Response(JSON.stringify(emailResponse), {
      status: 200,
      headers: {
        "Content-Type": "application/json",
        ...corsHeaders,
      },
    });
  } catch (error: any) {
    console.error("Error sending email:", error);
    return new Response(
      JSON.stringify({ 
        error: error.message || "Failed to send email",
        stack: error.stack 
      }),
      {
        status: 500,
        headers: { "Content-Type": "application/json", ...corsHeaders },
      }
    );
  }
};

serve(handler);
