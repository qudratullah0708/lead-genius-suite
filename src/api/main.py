
from fastapi import FastAPI, Request, Body, HTTPException
from fastapi.middleware.cors import CORSMiddleware
import os
import smtplib
from email.message import EmailMessage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from email.mime.application import MIMEApplication
import stripe
from dotenv import load_dotenv
import logging

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# Load environment variables
load_dotenv()

app = FastAPI()

# Add CORS middleware to allow cross-origin requests
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Configure Stripe with API key
stripe.api_key = os.getenv("GROQ_API_KEY")  # Using secret from .env

@app.get("/")
async def root():
    return {"message": "Email Service API is running"}

@app.post("/send-email")
async def send_email(data: dict = Body(...)):
    email_password = os.environ.get('EMAIL_APP_PASSWORD')
    
    logger.info(f"Received email request to: {data.get('recipient_email')}, subject: {data.get('subject')}")
    
    if not email_password:
        logger.error("EMAIL_APP_PASSWORD environment variable is not set")
        raise HTTPException(status_code=500, detail="Email server configuration error: Missing password")
    
    try:
        msg = MIMEMultipart()
        msg['Subject'] = data.get('subject', 'Your Lead Report')
        msg['From'] = 'qudratullah0708@gmail.com'
        msg['To'] = data.get('recipient_email')
        
        # Add text content
        text_content = data.get('message', 'Here is your lead report.')
        msg.attach(MIMEText(text_content, 'plain'))
        
        # Add HTML content
        leads = data.get('leads', [])
        query = data.get('query', 'Unknown search')
        
        html_content = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; }}
                .header {{ background-color: #f8f9fa; padding: 20px; text-align: center; }}
                .content {{ padding: 20px; }}
                table {{ border-collapse: collapse; width: 100%; }}
                th, td {{ border: 1px solid #ddd; padding: 8px; text-align: left; }}
                th {{ background-color: #f2f2f2; }}
                tr:nth-child(even) {{ background-color: #f9f9f9; }}
                .footer {{ margin-top: 20px; font-size: 0.9em; color: #666; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h2>LeadGen Report</h2>
                <p>Search query: "{query}"</p>
            </div>
            <div class="content">
                <p>{text_content}</p>
                
                <h3>Leads ({len(leads)})</h3>
        """
        
        # Add table of leads if we have any
        if leads:
            html_content += """
                <table>
                    <tr>
                        <th>Name</th>
                        <th>Title</th>
                        <th>Company</th>
                        <th>Email</th>
                        <th>Phone</th>
                        <th>Location</th>
                        <th>Source</th>
                    </tr>
            """
            
            for lead in leads:
                html_content += f"""
                    <tr>
                        <td>{lead.get('name', '')}</td>
                        <td>{lead.get('title', '')}</td>
                        <td>{lead.get('company', '')}</td>
                        <td>{lead.get('email', '')}</td>
                        <td>{lead.get('phone', '')}</td>
                        <td>{lead.get('location', '')}</td>
                        <td>{lead.get('source', '')}</td>
                    </tr>
                """
            
            html_content += "</table>"
        else:
            html_content += "<p>No leads to display.</p>"
        
        # Close the HTML
        html_content += """
                <div class="footer">
                    <p>This report was generated by LeadGen Agent. For any questions, please contact support.</p>
                </div>
            </div>
        </body>
        </html>
        """
        
        msg.attach(MIMEText(html_content, 'html'))
        
        # Add CSV attachment if provided
        if data.get('attachCsv') and data.get('csvContent'):
            logger.info("Attaching CSV file to email")
            csv_content = data['csvContent'].encode('utf-8')
            attachment = MIMEApplication(csv_content)
            file_name = f"leads_{data.get('query', 'report').replace(' ', '_')}.csv"
            attachment['Content-Disposition'] = f'attachment; filename="{file_name}"'
            msg.attach(attachment)

        logger.info(f"Connecting to SMTP server with user: qudratullah0708@gmail.com")
        with smtplib.SMTP_SSL('smtp.gmail.com', 465) as smtp:
            smtp.login('qudratullah0708@gmail.com', email_password)
            logger.info(f"Sending email to {data.get('recipient_email')}")
            smtp.send_message(msg)
            
        logger.info("Email sent successfully")
        return {"message": "Email sent successfully"}
    except Exception as e:
        logger.error(f"Failed to send email: {str(e)}", exc_info=True)
        raise HTTPException(status_code=500, detail=f"Failed to send email: {str(e)}")

@app.post("/create-checkout-session")
async def create_checkout_session(data: dict = Body(...)):
    try:
        # Configure Stripe API key
        stripe.api_key = os.getenv("STRIPE_SECRET_KEY")
        
        price_id = data.get('priceId')
        tier_name = data.get('tierName')
        is_trial = data.get('isTrial', False)
        
        checkout_params = {
            'payment_method_types': ['card'],
            'line_items': [{
                'price': price_id,
                'quantity': 1,
            }],
            'mode': 'subscription' if not is_trial else 'payment',
            'success_url': data.get('successUrl', 'http://localhost:3000/dashboard?checkout=success'),
            'cancel_url': data.get('cancelUrl', 'http://localhost:3000/pricing?checkout=cancelled'),
            'metadata': {
                'tier': tier_name
            }
        }
        
        # Add trial_period_days for the starter tier only if it's marked as trial
        if is_trial:
            checkout_params['subscription_data'] = {
                'trial_period_days': 14
            }
        
        session = stripe.checkout.Session.create(**checkout_params)
        return {"id": session.id, "url": session.url}
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))

def main():
    print("FastAPI server is running")

if __name__ == "__main__":
    main()
